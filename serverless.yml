plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline
app: sls-test
service: sls-test
useDotenv: true
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'local'}
  region: ${env:REGION}
  memorySize: 256
  timeout: 20
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - ${file(sls-yml/dynamodb/dynamodb-statements.yml)}
        - Effect: 'Allow'
          Action:
            - 'lambda:InvokeFunction'
            - 'lambda:InvokeAsync'
          Resource: '*'
  environment:
    DYNAMO_ENDPOINT: ${env:DYNAMO_ENDPOINT}
    REGION: ${env:REGION}
    IS_OFFLINE: ${env.IS_OFFLINE}
    S3_ENDPOINT: ${env.S3_ENDPOINT}
    S3_LOCAL_ENDPOINT: ${env.S3_LOCAL_ENDPOINT}
    LAMBDA_ENDPOINT: ${env:LAMBDA_ENDPOINT}
    LOCAL_LAMBDA_ENDPOINT: ${env:LOCAL_LAMBDA_ENDPOINT}

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      docker: true
      port: 8010:8000
      inMemory: false
      migrate: true
      convertEmptyValues: false
      noStart: false
      dockerImage: amazon/dynamodb
  s3:
    host: localhost
    directory: ./s3-buckets

functions:
  - ${file(sls-yml/hello/hello-functions.yml)}
  - ${file(sls-yml/users/users-function.yml)}
  - ${file(sls-yml/s3/s3-functions.yml)}

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: isActive
            AttributeType: N
          - AttributeName: firstName
            AttributeType: S
          - AttributeName: userName
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: isActiveIndex
            KeySchema:
              - AttributeName: isActive
                KeyType: HASH
              - AttributeName: firstName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
          - IndexName: userNameIndex
            KeySchema:
              - AttributeName: userName
                KeyType: HASH
              - AttributeName: firstName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
    localBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: local-bucket
